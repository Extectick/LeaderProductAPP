import { ConfigPlugin, withDangerousMod } from "@expo/config-plugins";
import fs from "fs";
import path from "path";

/** –û–ø—Ü–∏–∏ –ø–ª–∞–≥–∏–Ω–∞ */
export type WithCppFlagsOptions = {
  /** –°–æ–∑–¥–∞–≤–∞—Ç—å android/app/CMakeLists.txt, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç */
  createCMakeIfMissing?: boolean;
  /** –ù–∞–±–æ—Ä C++ —Ñ–ª–∞–≥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å */
  extraCppFlags?: string[];
  /** –ö–∞–∫ –∏–º–µ–Ω–Ω–æ –≤–Ω–µ–¥—Ä—è—Ç—å —Ñ–ª–∞–≥–∏:
   * - "targetCompileOptions": –ø—ã—Ç–∞—Ç—å—Å—è –≤—Å—Ç–∞–≤–∏—Ç—å –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ target_compile_options(... PRIVATE ...)
   * - "addCompileOptions": –µ—Å–ª–∏ –Ω–µ—Ç target_* ‚Äî –¥–æ–±–∞–≤–ª—è—Ç—å add_compile_options(...)
   * - "both": —Å–Ω–∞—á–∞–ª–∞ targetCompileOptions (–µ—Å–ª–∏ –Ω–∞—à–ª–∏), –∏–Ω–∞—á–µ addCompileOptions
   */
  mode?: "targetCompileOptions" | "addCompileOptions" | "both";
};

/** –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é */
const defaultOptions: Required<WithCppFlagsOptions> = {
  createCMakeIfMissing: true,
  extraCppFlags: ["-Wno-dollar-in-identifier-extension"],
  mode: "both",
};

const HEADER = "# Added by with-cpp-flags Expo config plugin";

const withCppFlags: ConfigPlugin<WithCppFlagsOptions> = (config, userOptions) => {
  const options = { ...defaultOptions, ...(userOptions ?? {}) };

  return withDangerousMod(config, [
    "android",
    async (cfg) => {
      const cmakePath = path.join(
        cfg.modRequest.projectRoot,
        "android",
        "app",
        "CMakeLists.txt"
      );

      // 1) —Å–æ–∑–¥–∞—Ç—å CMakeLists.txt –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
      if (!fs.existsSync(cmakePath)) {
        if (!options.createCMakeIfMissing) {
          console.warn("[with-cpp-flags] CMakeLists.txt –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ –æ–ø—Ü–∏–µ–π.");
          return cfg;
        }
        const content = [
          "cmake_minimum_required(VERSION 3.4.1)",
          "",
          `${HEADER}`,
          options.mode !== "targetCompileOptions"
            ? `add_compile_options(${options.extraCppFlags.join(" ")})`
            : `# target_compile_options –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–∑–¥–Ω–µ–µ`,
          "",
        ]
          .filter(Boolean)
          .join("\n");

        fs.mkdirSync(path.dirname(cmakePath), { recursive: true });
        fs.writeFileSync(cmakePath, content + "\n", "utf-8");
        console.log("[with-cpp-flags] üÜï –°–æ–∑–¥–∞–Ω android/app/CMakeLists.txt");
        return cfg;
      }

      // 2) –ü–∞—Ç—á —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ CMakeLists.txt
      let cmake = fs.readFileSync(cmakePath, "utf-8");

      // –£–∂–µ –≤—Å—Ç–∞–≤–ª—è–ª–∏?
      const alreadyHasAll = options.extraCppFlags.every((f) => cmake.includes(f));
      if (alreadyHasAll) {
        console.log("[with-cpp-flags] ‚ö° –§–ª–∞–≥–∏ —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é");
        return cfg;
      }

      const flagsString = options.extraCppFlags.join(" ");

      const hasTargetCompileOptions = /(target_compile_options\s*\([^\)]*PRIVATE[^\)]*\))/s.test(cmake);
      const hasAddCompileOptions = /add_compile_options\s*\(([^)]*)\)/s.test(cmake);

      const addHeaderOnce = (text: string) =>
        text.includes(HEADER) ? text : `${HEADER}\n${text}`;

      const tryInjectIntoTarget = (text: string): string | null => {
        if (!hasTargetCompileOptions) return null;
        // –í—Å—Ç–∞–≤–∏–º —Ñ–ª–∞–≥–∏ –≤ –ø–µ—Ä–≤—ã–π –≤—Å—Ç—Ä–µ—Ç–∏–≤—à–∏–π—Å—è target_compile_options(... PRIVATE ...)
        return text.replace(
          /(target_compile_options\s*\([^\)]*PRIVATE)([^\)]*\))/s,
          (_m, p1, p2) => `${addHeaderOnce(p1)} ${flagsString}${p2}`
        );
      };

      const tryAddCompileOptions = (text: string): string | null => {
        if (hasAddCompileOptions) {
          // –î–æ–ø–∏—à–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ñ–ª–∞–≥–∏ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º add_compile_options(...)
          return text.replace(
            /add_compile_options\s*\(([^)]*)\)/s,
            (_m, inner) => {
              const existing = inner.split(/\s+/).filter(Boolean);
              const missing = options.extraCppFlags.filter((f) => !existing.includes(f));
              if (missing.length === 0) return _m; // –≤—Å—ë —É–∂–µ –µ—Å—Ç—å
              return addHeaderOnce(`add_compile_options(${inner.trim()} ${missing.join(" ")})`);
            }
          );
        }
        // –ò–Ω–∞—á–µ –¥–æ–±–∞–≤–∏–º –Ω–æ–≤—ã–π –±–ª–æ–∫ add_compile_options(...)
        const insertPoint = text.includes("cmake_minimum_required")
          ? text.replace(/cmake_minimum_required[^\n]*\n?/, (line) => line + addHeaderOnce("") + `add_compile_options(${flagsString})\n`)
          : addHeaderOnce(`add_compile_options(${flagsString})\n`) + text;

        return insertPoint;
      };

      let patched = cmake;

      if (options.mode === "targetCompileOptions") {
        patched = tryInjectIntoTarget(patched) ?? patched;
      } else if (options.mode === "addCompileOptions") {
        patched = tryAddCompileOptions(patched) ?? patched;
      } else {
        // both
        const t1 = tryInjectIntoTarget(patched);
        patched = t1 ?? tryAddCompileOptions(patched) ?? patched;
      }

      // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —Ñ–ª–∞–≥–∏ –¥–æ–±–∞–≤–∏–ª–∏—Å—å?
      const nowHasAll = options.extraCppFlags.every((f) => patched.includes(f));
      if (!nowHasAll) {
        console.warn("[with-cpp-flags] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –≤–Ω–µ–¥—Ä–∏—Ç—å –≤—Å–µ —Ñ–ª–∞–≥–∏ ‚Äî –ø—Ä–æ–≤–µ—Ä—å CMakeLists –≤—Ä—É—á–Ω—É—é.");
      } else {
        if (patched !== cmake) {
          fs.writeFileSync(cmakePath, patched, "utf-8");
          console.log("[with-cpp-flags] ‚úÖ –§–ª–∞–≥–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ CMakeLists.txt:", options.extraCppFlags.join(" "));
        } else {
          console.log("[with-cpp-flags] ‚ö° –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è");
        }
      }

      return cfg;
    },
  ]);
};

export default withCppFlags;
